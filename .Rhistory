sd(data$weight)
var(data$Height)
lapply(data[,2:3] mean)
lapply(data[,2:3], mean)
lapply(data[,2:3], mean , sd , meadin)
lapply(data[,2:3], mean , sd )
lapply(data[,2:3], mean )
lapply(data[,2:3], sd )
lapply(data[,2:3], sd )
lapply(data[,2:3], median )
summary(data)
aov(data$Height ~ data$crop)
a1 <- aov(data$Height ~ data$crop)
summary(a1)
TukeyHSD(a1)
a2 <- avo(data$Height ~ data$cro* data$water)
a2 <- avo(data$Height ~ data$crop * data$water)
a2 <- aov(data$Height ~ data$crop * data$water)
summary(a2)
TukeyHSD(a2)
library(readxl)
data2 <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
quit()
library(readxl)
data <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
View(data)
x <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
View(data)
#boxplot
boxplot(x$Height ~ x$crop)
#multiple comparison of mean
# tukey test
install.packages("agricolae")
#multiple comparison of mean
# tukey test
install.packages("agricolae")
library(agricolae)
help("agricolae-package")
model <- avo(Height ~ crop, data = x )
model <- aov(Height ~ crop, data = x )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
plot(out)
out <-  HSD.test(model),"crop", group = TRUE, console = TRUE, main ="tukey test")
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
#test no 2 LSD test
model <- aov(Height ~ crop, data = x )
out <-  lsd.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
out <-  LSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
out <-  LSD.test(model,"crop", group = TRUE, console = TRUE, main ="LSD test")
plot(out)
#test no 3 duncan test
model <- aov(Height ~ crop, data = x )
out <-  duncan.test(model,"crop", group = TRUE, console = TRUE, main ="Duncan test")
plot(out)
boxplot(Height ~ crop * water  data = x)
boxplot(Height ~ crop * water,  data = x)
model1 <- <- aov(Height ~ crop, data = x )
model1 <-  aov(Height ~ crop, data = x )
out <-  HSD.test(model,c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
out <-  HSD.test(model,c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
out <-  HSD.test(model1,c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
out1 <-  HSD.test(model1,c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
print(out1)
boxplot(Height ~ crop * water,  data = x)
library(readxl)
data <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
View(data)
boxplot(x$Height ~ x$crop)
x <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
boxplot(x$Height ~ x$crop)
model <- aov(Height ~ crop, data = x )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
#boxplot
install.packages("agricolae")
#multiple comparison of mean
#  test no 1 tukey test
library(agricolae)
model <- aov(Height ~ crop, data = x )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
(out)
plot(out)
#test no 2 LSD test
model <- aov(Height ~ crop, data = x )
out <-  LSD.test(model,"crop", group = TRUE, console = TRUE, main ="LSD test")
plot(out)
#test no 3 duncan test
model <- aov(Height ~ crop, data = x )
out <-  duncan.test(model,"crop", group = TRUE, console = TRUE, main ="Duncan test")
plot(out)
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
plot(out1)
any(is.na(x$Height))
any(is.infinite(x$Height))
levels(x$crop)
levels(x$water)
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
plot(out1)
plot.window(...)
quit()
library(readxl)
x <- read_excel("data2.xlsx", sheet = "Sheet1 (2)",
col_types = c("text", "numeric", "numeric",
"text"))
View(data)
View(x)
View(data)
View(x)
boxplot(x$Height ~ x$crop)
library(agricolae)
model <- aov(Height ~ crop, data = x )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
plot(out)
#test no 2 LSD test
model <- aov(Height ~ crop, data = x )
out <-  LSD.test(model,"crop", group = TRUE, console = TRUE, main ="LSD test")
plot(out)
#test no 3 duncan test
model <- aov(Height ~ crop, data = x )
out <-  duncan.test(model,"crop", group = TRUE, console = TRUE, main ="Duncan test")
plot(out)
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
plot(out1)
boxplot(Height ~ crop * water,  data = x)
any(is.na(x$crop))
any(is.infinite(x$crop))
any(is.infinite(x$crop))
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
plot(out1)
levels(x$water)
levels(x$crop)
is.na()
is.na(x)
na.omit(x)
boxplot(Height ~ crop * water,  data = x)
model1 <-  aov(Height ~ crop, data = x )
out1 <-  HSD.test(model1, c("crop","water"), group = TRUE, console = TRUE, main ="tukey test")
model <- aov(Height ~ crop, data = x )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
plot(out)
plot(out, horiz =  TRUE)
plot(out, horiz =  TRUE las = 2)
model <- aov(Height ~ crop, data = x las=2 )
model <- aov(Height ~ crop, data = x, las=2 )
library(agricolae)
model <- aov(Height ~ crop, data = x, las=2 )
model <- aov(Height ~ crop, data = x  )
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
out <-  HSD.test(model,"crop", group = TRUE, console = TRUE, main ="tukey test")
boxplot(Height ~ crop * water,  data = x)
boxplot(Height ~ crop * water,  data = x, las=2)
boxplot(Height ~ crop * water,  data = x, las=2 , main = "")
boxplot(Height ~ crop * water,  data = x, las=2 , xlab ="")
dev.off()
jpeg(file="boxplot",width = 6,height = 4,units = "in",res = 300)
boxplot(Height ~ crop * water,  data = x, las=2 , xlab ="")
dev.off()
jpeg(file="boxplot.tiff",width = 6,height = 4,units = "in",res = 300)
boxplot(Height ~ crop * water,  data = x, las=2 , xlab ="")
dev.off()
quit
quit()
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(readxl)
x <- read_excel("ggdata.xlsx", sheet = "gg1",
col_types = c("text", "numeric", "text",
"text"))
View(x)
ggplot( data = x , mapping = aes(x=crop, y = height))+ geom_point()
ggplot(x, aes(crop,height)) + geom_point()
ggplot(x, aes(crop,height)) + geom_point()+ geom_line()
ggplot(x, aes(crop,height)) + geom_point(size=3)+ geom_line()
ggplot(x, aes(crop,height)) + geom_point(size=3)
ggplot(x, aes(crop,height)) + geom_boxplot(size=3)
ggplot(x, aes(crop,height)) + geom_boxplot()
ggplot(x, aes(crop,height)) + geom_boxplot() +geom_point()
ggplot(x, aes(crop,height)) + geom_boxplot() +geom_point(colors="red")
ggplot(x, aes(crop,height)) + geom_boxplot() +geom_point(colours="red")
ggplot(x, aes(crop,height)) + geom_boxplot() +geom_point(colour="red")
ggplot(x, aes(crop,height)) + geom_boxplot() +geom_point(colour="red" ,
alpha=0.8)
ggplot(x, aes(crop,height, color = water)) +
geom_boxplot()
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()
facet_wrap(~fert.type)
facet_wrap(~fert.type)
facet_wrap(~fert.type)
facet_wrap(~ fert.type)
facet_wrap(~fert.type)
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()+
facet_wrap(~fert.type)
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()+
facet_wrap(~fert.type)+
labs(x ="croptype", y = "plant height ",
title = "plant Growth")+
theme_bw()
ggsave(ggplot.tiff, units = "in" , width = 8, height = 6, dpi = 300, compression = 'lzw')
ggsave("ggplot.tiff", units = "in" , width = 8, height = 6, dpi = 300, compression = 'lzw')
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()+
facet_wrap(~fert.type)+
labs(x ="croptype", y = "plant height ",
title = "plant Growth")+
theme_bw()+
coord_flip()+
ggsave("ggplot.tiff", units = "in" , width = 8, height = 6, dpi = 300, compression = 'lzw')
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()+
facet_wrap(~fert.type)+
labs(x ="croptype", y = "plant height ",
title = "plant Growth")+
theme_bw()+
coord_flip()
ggplot(x, aes(crop,height, fill = water)) +
geom_boxplot()+
facet_wrap(~fert.type)+
labs(x ="croptype", y = "plant height ",
title = "plant Growth")+
theme_bw()+
coord_flip()+
ggsave("ggplot.tiff", units = "in" , width = 8, height = 6, dpi = 300, compression = 'lzw')
datatype
datatype()
data()
View(CO2)
install.packages("writexl")
writexl(co2, path = "C:\Users\TOSHIBA\Desktop\test_1")
writexl(co2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1.co2.xlsx")
write_xlsx(co2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1.co2.xlsx")
write_xlsx(co2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1.co2.xlsx")
install.packages("writexl")
install.packages("writexl")
library(writexl)
write_xlsx(co2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1.co2.xlsx")
write_xlsx(co2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1\\co2.xlsx")
write_xlsx(CO2, path = "C:\\Users\\TOSHIBA\\Desktop\\test_1\\co2.xlsx")
data()
library(ggplot2)
gggplot(trees, aes(Grith , Height)) +geom_point()
ggplot(trees, aes(Grith , Height)) +geom_point()
ggplot(trees, aes(Girth , Height)) +geom_point()
ggplot(trees, aes(Girth , Height)) +geom_point() + GeomSmooth()
ggplot(trees, aes(Girth , Height)) +geom_point() + geom_smooth()
ggplot(trees, aes(Girth , Height)) +geom_point() + geom_smooth(method = "lm")
head(CO2)
tail(CO2)
nrow(CO2)
ncol(CO2)
v1 <- c(1 ,2,3,4,5,6,7,8,9)
v1 <- c(1 ,2,3,4,5,6,7,8,9)
v2 <- c(10,11,12,13,14,15,16,17,18)
print(v1)
print(v2)
v1+v2
v1*v2
v1 - v2
v1cv2
v3 <- c(v1,v2)
# vector for string
s1 <- c("1" , "love",  "r")
n2 <- c(v1,s1)
n3 <- c(s1,v1)
#sequence functin in r
seq(1,100)
seq(1,55 time = 3)
seq(from = 4,to = 20)
seq (from = 4, to =20,by=5)
seq (from = 5 to =20,by=5)
seq (from = 5 to =20,by=5)
seq (from = 5,to =20,by=5)
seq1  <- seq(3,33 by =1.2)
seq1  <- seq(3,33, by =1.2)
seq1  <- seq(3,33, by =1.2)
rep("hell " , time=3)
rep(123 , time 100)
rep(123 , time =100)
rep("homework" time= 10)
rep("homework" ,time= 10)
library(ggplot2)
data(cars)
View(cars)
ggplot( cars, aes(x = speed , y = dist)) +geom_point()
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth()
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm")
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se=f)
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se = FALSE)
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se = T)
geom_smooth(method = "lm", se = F
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se = T)
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se = T level = 0.9)
ggplot( cars, aes(x = speed , y = dist)) +geom_point()+
geom_smooth(method = "lm", se = T,level = 0.9)
#scatter in r with multiple lines
data("Orange")
View(Orange)
ggplot(Orange, aes(x= age, y= circumference)) + geom_point()
+ geom_point()
+ geom_point()
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point()
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4)
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4 shape =17)
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shape =17)
ggplot(Orange, aes(x= age, y= circumference,shape=Tree))+
geom_point(size=4,shape =17)
ggplot(Orange, aes(x= age, y= circumference,shape=Tree))+
geom_point(size=4)
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shap=19)
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shap=19)+
geom_line(linetype = 1, size =1 )
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shap=19)+
geom_line(aes(linetype=Tree),size =1)
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shap=19)+
geom_line(aes(linetype=Tree),size =1)+
ggsave("scatterplo t.pdf")
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shap=19)+
geom_line(aes(linetype=Tree),size =1)+
labs(x = "Age", y = "circumfereence" , title = "Graph")
geom_point(size=4,shape=19+
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shape=19)+
geom_line(aes(linetype=Tree),size =1)+
labs(x = "Age", y = "circumfereence" , title = "Graph")
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
data("Orange")
ggplot(Orange, aes(x= age, y= circumference,color=Tree))+
geom_point(size=4,shape=19)+
geom_line(aes(linetype=Tree),size =1)+
labs(x = "Age", y = "circumfereence" , title = "Graph")+
ggsave("scatterplo t.pdf")
#bubble plot
install.packages("viridis")
#bubble plot
install.packages("viridis")
install.packages("viridis")
#bubble plot
install.packages("viridis")
library(viridis)
data ("quakes")
View(quakes)
nrow(quakes)
q_sample <- quakes[seq(from =1 , to = 1000, by =10),]
View(q_sample)
View(q_sample)
View(quakes)
nrow(q_samples)
nrow(q_sample)
ggplot(data =q_sample,aes(x = lat , = long))+
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point()
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag))
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)+
scale_colour_viridis_b(option = b)
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)+
scale_colour_viridis_b(option = "B")
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)+
scale_colour_viridis_b(option = "B")+
scale_size_continuous(range = c(1,11))
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)+
scale_colour_viridis_b(option = "B")+
scale_size_continuous(range = c(1,9))
ggplot(data =q_sample,aes(x = lat , y=long))+
geom_point(aes(size=mag, color = mag))+
guides(size=F)+
scale_colour_viridis_b(option = "B")+
scale_size_continuous(range = c(1,9))+
labs(x = "lat", y = "long" , title = "Graph")
#jitter plot
data("dimond")
#jitter plot
data("diamonds")
#jitter plot
data("diamonds")
View(diamonds)
View(diamonds)
nrow(diamonds)
d_sample <- quakes[seq(from =1 , to = 49000, by =1000),]
nrow(q_sample)
nrow(d_sample)
d_sample <- quakes[seq(from =1 , to = 49000, by =100),]
nrow(d_sample)
ggplot(d_sample, aes(x = cut , y= price))+geom_jitter()
View(diamonds)
ggplot(d_sample, aes(cut ,price))+geom_jitter()
ggplot(d_sample, aes(cut,price))geom_jitter()
ggplot(d_sample, aes(cut,price))+geom_jitter()
ggplot(d_sample, aes(cut,price))+geom_jitter()
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price)) + geom_jitter()
View(d_sample)
View(d_sample)
View(d_sample)
q_sample <- quakes[seq(from =1 , to = 1000, by =10),]
q_sample <- quakes[seq(from =1 , to = 1000, by =10),]
View(q_sample)
q_sample <- quakes[seq(from =1 , to = 1000, by =10),]
View(q_sample)
d_sample <- quakes[seq(from =1 , to = 49000, by =100),]
View(d_sample)
#jitter plot
data("diamonds")
#jitter plot
data("diamonds")
View(diamonds)
d_sample <- dia[seq(from =1 , to = 49000, by =100),]
d_sample <- dia[seq(from =1 , to = 49000, by =100),]
d_sample <- dia[seq(from =1 , to = 49000, by =100),]
d_sample <- dia[seq(from =1 , to = 49000, by =100),]
d_sample <- diamonds[seq(from =1 , to = 49000, by =100),]
View(d_sample)
nrow(d_sample)
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price)) + geom_jitter()
ggplot(d_sample, aes(cut, price)) + geom_point()
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price)) + geom_jitter()
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price color = cut)) + geom_jitter()
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price, color = cut)) + geom_jitter()
d_sample <- diamonds[seq(from =1 , to = 49000, by =10),]
#ggplot(d_sample, aes(cut,price))+geom_jitter()
# Assuming the 'price' variable is present in the 'd_sample' dataset
ggplot(d_sample, aes(cut, price, color = cut)) + geom_jitter()
View(d_sample)
library("ggplot2")
data("diamonds")
View(diamonds)
d-sample <- diamonds[seq(1,1000,by=10),]
d_sample <- diamonds[seq(1,1000,by=10),]
nrow(d_sample)
d_sample <- diamonds[seq(1,53000,by=10),]
nrow(d_sample)
ggplot(data=d_sample, aes(cut,price))+geom_violin()
p <- ggplot(data=d_sample, aes(cut,price))+geom_violin()
p <- ggplot(data=d_sample, aes(cut,price , color= cut))+geom_violin()
p <- ggplot(data=d_sample, aes(cut,price , color= cut))+geom_violin()
p <- ggplot(data=d_sample, aes(cut,price , color = cut))+geom_violin()
ggplot(data=d_sample, aes(cut,price , color = cut))+geom_violin()
p <- ggplot(data=d_sample, aes(cut,price , color = cut))+geom_violin()
p + geom_boxplot()
p + geom_boxplot(width= 0.1)
p + geom_boxplot(width= 0.1)+ geom_jitter()
p + geom_boxplot(width= 0.1)+ geom_jitter(size=0.5)
d_sample <- diamonds[seq(1,53000,by=100),]
nrow(d_sample)
p <- ggplot(data=d_sample, aes(cut,price , color = cut))+geom_violin()
p + geom_boxplot(width= 0.1)+ geom_jitter(size=0.5)
p + geom_boxplot(width= 0.1)+ geom_jitter(size=0.5)+
ggsave("ggvolin.pdf")
giinit
quit()
